<?php

namespace Fabiang\Msgfmt\Parser\Gettext;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-12 at 13:03:21.
 *
 * @coversDefaultClass Fabiang\Msgfmt\Parser\Gettext\Lexer
 */
class LexerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Lexer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Lexer("\ntest1\ntest2\r\ntest3\n\ntest4\r\rtest5");
    }

    /**
     * @covers ::getAdvancedToken
     * @covers ::nextLine
     * @covers ::takeToken
     * @covers ::getAdvancedToken
     * @covers ::getNextToken
     * @covers ::scanText
     * @covers ::scanId
     * @covers ::scanString
     * @covers ::scanObject
     * @covers ::getCurrentLine
     * @covers ::scanIdPlural
     * @covers ::scanStringPlural
     * @covers ::scanExtractedComment
     * @covers ::scanReference
     * @covers ::scanFlag
     * @covers ::scanPreviousTranslated
     * @covers ::scanTranslatorComment
     * @covers ::scanComment
     * @uses Fabiang\Msgfmt\Parser\Gettext\Lexer::__construct
     * @uses Fabiang\Msgfmt\Parser\Gettext\Lexer\Token
     * @dataProvider provideInput
     */
    public function testGetAdvancedToken($expected, $input)
    {
        $object = new Lexer($input);

        foreach ($expected as $expectedToken) {
            $currentToken = $object->getAdvancedToken();

            $expectedType  = $expectedToken['type'];
            $expectedLine  = $expectedToken['lineno'];
            $expectedValue = $expectedToken['value'];

            $this->assertInstanceOf('Fabiang\Msgfmt\Parser\Gettext\Lexer\Token', $currentToken);
            $this->assertSame($expectedType, $currentToken->getType());
            $this->assertSame($expectedLine, $currentToken->getLine());
            $this->assertSame($expectedValue, $currentToken->getValue());
            $this->assertSame($expectedLine, $object->getCurrentLine());
        }

        $this->assertNull(
            $object->getAdvancedToken(),
            'There shouldn\'t be a token left after lexing the input data'
        );
    }

    public function provideInput()
    {
        return array(
            array(
                'expected' => array(
                    array(
                        'type'   => 'text',
                        'lineno' => 1,
                        'value'  => 'test',
                    ),
                ),
                'input'    => '"test"'
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgid',
                        'lineno' => 1,
                        'value'  => 'test',
                    ),
                ),
                'input'    => 'msgid "test"'
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgstr',
                        'lineno' => 1,
                        'value'  => 'test',
                    ),
                ),
                'input'    => 'msgstr "test"'
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgid_plural',
                        'lineno' => 1,
                        'value'  => 'test',
                    ),
                ),
                'input'    => 'msgid_plural "test"'
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgid_plural',
                        'lineno' => 1,
                        'value'  => 'test',
                    ),
                    array(
                        'type'   => 'msgstr_plural',
                        'lineno' => 2,
                        'value'  => 'plural1',
                    ),
                    array(
                        'type'   => 'msgstr_plural',
                        'lineno' => 3,
                        'value'  => 'plural2',
                    ),
                ),
                'input'    => "msgid_plural \"test\"\nmsgstr[0] \"plural1\"\nmsgstr[1] \"plural2\""
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'comment',
                        'lineno' => 1,
                        'value'  => 'Comment',
                    ),
                    array(
                        'type'   => 'reference',
                        'lineno' => 2,
                        'value'  => 'Reference',
                    ),
                    array(
                        'type'   => 'extracted_comment',
                        'lineno' => 3,
                        'value'  => 'extracted comment',
                    ),
                    array(
                        'type'   => 'flag',
                        'lineno' => 4,
                        'value'  => 'a flag',
                    ),
                    array(
                        'type'   => 'previous_translated',
                        'lineno' => 5,
                        'value'  => 'previous translated string',
                    ),
                ),
                'input'    => "# Comment\n#:Reference\n#. extracted comment\n#,  a flag\n#| previous translated string"
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgid',
                        'lineno' => 1,
                        'value'  => 'testid',
                    ),
                    array(
                        'type'   => 'msgstr',
                        'lineno' => 2,
                        'value'  => 'teststring',
                    ),
                ),
                'input'    => "msgid \"testid\"\nmsgstr \"teststring\""
            ),
        );
    }

    /**
     * @covers ::getNormalizedInput
     * @covers ::__construct
     */
    public function testGetNormalizedInput()
    {
        $this->assertSame(
            array(
                1 => 'test1',
                2 => 'test2',
                3 => 'test3',
                5 => 'test4',
                7 => 'test5',
            ),
            $this->object->getNormalizedInput()
        );
    }
}
