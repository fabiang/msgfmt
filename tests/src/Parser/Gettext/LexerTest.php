<?php

/**
 * Msgmft library.
 *
 * Copyright (c) 2015 Fabian Grutschus
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * o Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * o Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.|
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author Fabian Grutschus <f.grutschus@lubyte.de>
 */

namespace Fabiang\Msgfmt\Parser\Gettext;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-12 at 13:03:21.
 *
 * @coversDefaultClass Fabiang\Msgfmt\Parser\Gettext\Lexer
 */
class LexerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Lexer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Lexer("\ntest1\ntest2\r\ntest3\n\ntest4\r\rtest5");
    }

    /**
     * @covers ::getAdvancedToken
     * @covers ::nextLine
     * @covers ::takeToken
     * @covers ::getNextToken
     * @covers ::getLineNumber
     * @covers ::getLine
     * @covers ::scanText
     * @covers ::scanId
     * @covers ::scanString
     * @covers ::scanObject
     * @covers ::scanIdPlural
     * @covers ::scanStringPlural
     * @covers ::scanExtractedComment
     * @covers ::scanReference
     * @covers ::scanFlag
     * @covers ::scanPreviousTranslated
     * @covers ::scanTranslatorComment
     * @covers ::scan
     * @uses Fabiang\Msgfmt\Parser\Gettext\Lexer::__construct
     * @uses Fabiang\Msgfmt\Parser\Gettext\Lexer\Token
     * @dataProvider provideInput
     */
    public function testGetAdvancedToken($expected, $input)
    {
        $object = new Lexer($input);

        foreach ($expected as $expectedToken) {
            $currentToken = $object->getAdvancedToken();

            $expectedType   = $expectedToken['type'];
            $expectedLineNo = $expectedToken['lineno'];
            $expectedLine   = $expectedToken['line'];
            $expectedValue  = $expectedToken['value'];

            $this->assertInstanceOf('Fabiang\Msgfmt\Parser\Gettext\Lexer\Token', $currentToken);
            $this->assertSame($expectedType, $currentToken->getType());
            $this->assertSame($expectedLineNo, $currentToken->getLine());
            $this->assertSame($expectedValue, $currentToken->getValue());
            $this->assertSame($expectedLineNo, $object->getLineNumber());
            $this->assertSame($expectedLine, $object->getLine());
        }

        $this->assertNull(
            $object->getAdvancedToken(),
            'There shouldn\'t be a token left after lexing the input data'
        );
    }

    public function provideInput()
    {
        return array(
            array(
                'expected' => array(
                    array(
                        'type'   => 'text',
                        'lineno' => 1,
                        'line'   => '"test"',
                        'value'  => 'test',
                    ),
                ),
                'input'    => '"test"'
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgid',
                        'lineno' => 1,
                        'line'   => 'msgid "test"',
                        'value'  => 'test',
                    ),
                ),
                'input'    => 'msgid "test"'
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgstr',
                        'lineno' => 1,
                        'line'   => 'msgstr "test"',
                        'value'  => 'test',
                    ),
                ),
                'input'    => 'msgstr "test"'
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgid_plural',
                        'lineno' => 1,
                        'line'   => 'msgid_plural "test"',
                        'value'  => 'test',
                    ),
                ),
                'input'    => 'msgid_plural "test"'
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgid_plural',
                        'lineno' => 1,
                        'line'   => 'msgid_plural "test"',
                        'value'  => 'test',
                    ),
                    array(
                        'type'   => 'msgstr_plural',
                        'lineno' => 2,
                        'line'   => 'msgstr[0] "plural1"',
                        'value'  => 'plural1',
                    ),
                    array(
                        'type'   => 'msgstr_plural',
                        'lineno' => 3,
                        'line'   => 'msgstr[1] "plural2"',
                        'value'  => 'plural2',
                    ),
                ),
                'input'    => "msgid_plural \"test\"\nmsgstr[0] \"plural1\"\nmsgstr[1] \"plural2\""
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'comment',
                        'lineno' => 1,
                        'line'   => '# Comment',
                        'value'  => 'Comment',
                    ),
                    array(
                        'type'   => 'reference',
                        'lineno' => 2,
                        'line'   => '#:Reference',
                        'value'  => 'Reference',
                    ),
                    array(
                        'type'   => 'extracted_comment',
                        'lineno' => 3,
                        'line'   => '#. extracted comment',
                        'value'  => 'extracted comment',
                    ),
                    array(
                        'type'   => 'flag',
                        'lineno' => 4,
                        'line'   => '#,  a flag',
                        'value'  => 'a flag',
                    ),
                    array(
                        'type'   => 'previous_translated',
                        'lineno' => 5,
                        'line'   => '#| previous translated string',
                        'value'  => 'previous translated string',
                    ),
                ),
                'input'    => "# Comment\n#:Reference\n#. extracted comment\n#,  a flag\n#| previous translated string"
            ),
            array(
                'expected' => array(
                    array(
                        'type'   => 'msgid',
                        'lineno' => 1,
                        'line'   => 'msgid "testid"',
                        'value'  => 'testid',
                    ),
                    array(
                        'type'   => 'msgstr',
                        'lineno' => 2,
                        'line'   => 'msgstr "teststring"',
                        'value'  => 'teststring',
                    ),
                ),
                'input'    => "msgid \"testid\"\nmsgstr \"teststring\""
            ),
        );
    }

    /**
     * @covers ::getNormalizedInput
     * @covers ::__construct
     */
    public function testGetNormalizedInput()
    {
        $this->assertSame(
            array(
                1 => 'test1',
                2 => 'test2',
                3 => 'test3',
                5 => 'test4',
                7 => 'test5',
            ),
            $this->object->getNormalizedInput()
        );
    }
}
