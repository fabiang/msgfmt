<?php

/**
 * Msgmft library.
 *
 * Copyright (c) 2015 Fabian Grutschus
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * o Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * o Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.|
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author Fabian Grutschus <f.grutschus@lubyte.de>
 */

namespace Fabiang\Msgfmt\Parser;

use PHPUnit_Framework_TestCase as TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-08 at 14:44:06.
 *
 * @coversDefaultClass Fabiang\Msgfmt\Parser\Gettext
 */
class GettextTest extends TestCase
{

    /**
     * @var Gettext
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Gettext;
    }

    /**
     * @covers ::parse
     * @uses \Fabiang\Msgfmt\Translation\TranslationCollection
     * @uses \Fabiang\Msgfmt\Translation\Translation
     * @dataProvider provideTestData
     */
    public function testParse($expected, $input)
    {
        $result = $this->object->parse($input);
        $this->assertInstanceOf('\Fabiang\Msgfmt\Translation\TranslationCollection', $result);

        $expectedConverted = array();
        foreach ($result->getArrayCopy() as $id => $translation) {
            $this->assertInstanceOf('\Fabiang\Msgfmt\Translation\Translation', $translation);
            $expectedConverted[] = array(
                'key'          => $id,
                'id'           => $translation->getId(),
                'translations' => $translation->getTranslations()
            );
        }
        $this->assertSame($expected, $expectedConverted);
    }

    /**
     * @covers ::parseStream
     */
    public function testParseStream()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function provideTestData()
    {
        return array(
            array(
                'expected' => array(
                    array(
                        'key'          => 'mymsgid1',
                        'id'           => 'mymsgid1',
                        'translations' => array('test1')
                    ),
                    array(
                        'key'          => 'mymsgid2',
                        'id'           => 'mymsgid2',
                        'translations' => array('test2')
                    ),
                ),
                'input' => "msgid \"mymsgid1\"\nmsgstr \"test1\"\n"
                    . "msgid \"mymsgid2\"\nmsgstr \"test2\"\n"
            ),
            array(
                'expected' => array(
                    array(
                        'key'          => 'found one fatal error',
                        'id'           => 'found one fatal error',
                        'translations' => array('Ein fataler Fehler gefunden')
                    ),
                    array(
                        'key'          => 'found %d fatal errors',
                        'id'           => 'found %d fatal errors',
                        'translations' => array(
                            'zwei fatale Fehler gefunden',
                            '%d fatale Fehler gefunden',
                        )
                    ),
                ),
                'input' => "msgid \"found one fatal error\"\n"
                    . "msgid_plural \"found %d fatal errors\"\n"
                    . "msgstr[0] \"Ein fataler Fehler gefunden\"\n"
                    . "msgstr[1] \"zwei fatale Fehler gefunden\"\n"
                    . "msgstr[2] \"%d fatale Fehler gefunden\"\n"
            ),
            array(
                'expected' => array(
                    array(
                        'key'          => 'mymsgid1',
                        'id'           => 'mymsgid1',
                        'translations' => array('test1 new line')
                    ),
                ),
                'input' => "msgid \"mymsgid1\"\n"
                    . "msgstr \"te\"\n"
                    . "\"st1\"\n"
                    . "\" new line\"\n"
            ),
            array(
                'expected' => array(
                    array(
                        'key'          => 'mymsgid1',
                        'id'           => 'mymsgid1',
                        'translations' => array("new line works?\n")
                    ),
                ),
                'input' => "msgid \"mymsgid1\"\n"
                    . "msgstr \"new line works?\\n\"\n"
            ),
            array(
                'expected' => array(
                    array(
                        'key'          => 'mymsgid1',
                        'id'           => 'mymsgid1',
                        'translations' => array('test1')
                    ),
                ),
                'input' => "\n\nmsgid \"mymsgid1\"\n\nmsgstr \"test1\"\n"
            ),
//            array(
//                'expected' => array(
//                    array(
//                        'key'          => '',
//                        'id'           => '',
//                        'translations' => array()
//                    ),
//                    array(
//                        'key'          => '',
//                        'id'           => '',
//                        'translations' => array()
//                    ),
//                ),
//                'input' => ""
//            ),
        );
    }
}
