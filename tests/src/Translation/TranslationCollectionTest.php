<?php

/**
 * Msgmft library.
 *
 * Copyright (c) 2015 Fabian Grutschus
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * o Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * o Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.|
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author Fabian Grutschus <f.grutschus@lubyte.de>
 */

namespace Fabiang\Msgfmt\Translation;

use PHPUnit_Framework_TestCase as TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-08 at 15:24:06.
 *
 * @coversDefaultClass Fabiang\Msgfmt\Translation\TranslationCollection
 */
class TranslationCollectionTest extends TestCase
{

    /**
     * @var TranslationCollection
     */
    protected $object;

    /**
     * @var Translation[]
     */
    protected $translations = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->translations[] = new Translation('mymsgid1', array('test1', 'test2'));
        $this->translations[] = new Translation('mymsgid2', array('test2', 'test3'));
        $this->object = new TranslationCollection($this->translations);
    }

    /**
     * @covers ::append
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::__construct
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::getArrayCopy
     * @uses Fabiang\Msgfmt\Translation\Translation
     */
    public function testAppend()
    {
        $translation = new Translation('mymsgid3', array('test5', 'test6'));
        $this->object->append($translation);
         $this->assertSame(
            array(
                'mymsgid1' => $this->translations[0],
                'mymsgid2' => $this->translations[1],
                'mymsgid3' => $translation
            ),
            $this->object->getArrayCopy()
        );
    }

    /**
     * @covers ::__construct
     * @covers ::getArrayCopy
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::append
     * @uses Fabiang\Msgfmt\Translation\Translation
     */
    public function testGetArrayCopy()
    {
        $this->assertSame(
            array(
                'mymsgid1' => $this->translations[0],
                'mymsgid2' => $this->translations[1],
            ),
            $this->object->getArrayCopy()
        );
    }

    /**
     * @covers ::count
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::__construct
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::append
     * @uses Fabiang\Msgfmt\Translation\Translation
     */
    public function testCount()
    {
        $this->assertCount(2, $this->object);
    }

    /**
     * @covers ::getIterator
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::__construct
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::append
     * @uses Fabiang\Msgfmt\Translation\Translation
     */
    public function testGetIterator()
    {
        $this->assertInstanceOf('ArrayObject', $this->object->getIterator());
    }

    /**
     * @covers ::offsetExists
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::__construct
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::append
     * @uses Fabiang\Msgfmt\Translation\Translation
     */
    public function testOffsetExists()
    {
        $this->assertTrue(isset($this->object['mymsgid1']));
        $this->assertNotTrue(isset($this->object['mymsgid3']));
    }

    /**
     * @covers ::offsetGet
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::__construct
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::append
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::offsetExists
     * @uses Fabiang\Msgfmt\Translation\Translation
     */
    public function testOffsetGet()
    {
        $this->assertSame($this->translations[0], $this->object['mymsgid1']);
        $this->assertNull($this->object['mymsgid3']);
    }

    /**
     * @covers ::offsetSet
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::__construct
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::append
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::offsetGet
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::offsetExists
     * @uses Fabiang\Msgfmt\Translation\Translation
     */
    public function testOffsetSet()
    {
        $translation = new Translation('mymsgid3', array('test5', 'test6'));
        $this->object[] = $translation;
        $this->assertSame($translation, $this->object['mymsgid3']);

        $translation = new Translation('mymsgid4', array('test5', 'test6'));
        $this->object['foobar'] = $translation;
        $this->assertSame($translation, $this->object['mymsgid4']);
    }

    /**
     * @covers ::offsetUnset
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::__construct
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::append
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::count
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::offsetExists
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::offsetGet
     * @uses Fabiang\Msgfmt\Translation\Translation
     */
    public function testOffsetUnset()
    {
        $this->assertCount(2, $this->object);
        unset($this->object['mymsgid1']);
        $this->assertCount(1, $this->object);
        $this->assertNull($this->object['mymsgid1']);
    }

    /**
     * @covers ::serialize
     * @covers ::unserialize
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::__construct
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::append
     * @uses Fabiang\Msgfmt\Translation\TranslationCollection::getArrayCopy
     * @uses Fabiang\Msgfmt\Translation\Translation
     */
    public function testSerialize()
    {
        $data   = serialize($this->object);
        $object = unserialize($data);
        $this->assertEquals($this->object->getArrayCopy(), $object->getArrayCopy());
    }
}
